WHITESPACE: /\s/
%ignore WHITESPACE
_NEWLINE: /(\n|\r|\r\n)+/

INT_LITERAL.2: /\-?\d+/
FLOAT_LITERAL: /\-?\d*\.\d+([eE][+-]?\d+)?/
IDENTIFIER: /(?!else)[a-zA-Z_][a-zA-Z_\d]*/
PATTERN: /([-WYORGBa-z]+\/)+[-WYORGBa-z]+/

_elif_clause: "else-if" expression "then" clause
if_expression: "if" expression "then" clause (_elif_clause)* ("else" clause)? "end"
while_expression: "while" expression "do" clause "end"
do_expression: "do" clause "while" expression
repeat_expression: "repeat" expression "times" clause "end"
for_expression: "for" IDENTIFIER "in" expression "do" clause "end"

collection_item: op_item "[" expression "]"
cube_color_reference: op_item "[" expression "," expression "]"

?op_if: if_expression | op_item
?op_item: atom | collection_item | cube_color_reference

?atom: INT_LITERAL -> int_literal
           | FLOAT_LITERAL -> float_literal
           | IDENTIFIER -> variable
           | "(" expression ")" 
           | "-" expression -> negation
           | IDENTIFIER "(" (expression ",")* expression ")" -> func_call

?expression: op_0

?assignable: IDENTIFIER | collection_item

pattern: "(" PATTERN ")"

?type: "int" -> type_int
     | "real" -> type_real
     | "boolean" -> type_bool
     | "side" -> type_side
     | "color" -> type_color
     | "list" "of" type -> type_list
     | "set" "of" type -> type_set

var_decl: "let" (IDENTIFIER ",")* IDENTIFIER ":" type ("=" expression)?
argument: IDENTIFIER ":" type ("=" expression)?
// func_decl: "func" IDENTIFIER "(" (argument ",")* argument? ")" (":" type)? clause*
var_assignment: assignable "=" expression

?cube_command: "R" -> cube_right
            | "L" -> cube_left
            | "U" -> cube_top
            | "D" -> cube_bottom
            | "F" -> cube_front
            | "B" -> cube_back
?cube_action: cube_command
            | cube_command "2" -> cube_double
            | cube_command "'" -> cube_opposite
cube_instruction: cube_action+

?statement: var_decl | expression | var_assignment | while_expression
          | do_expression | repeat_expression | for_expression | cube_instruction
clause: (statement _NEWLINE)* statement?
